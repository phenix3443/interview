# -*- coding:utf-8-*-
#+TITLE: redis常见问题
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

* 什么是 Redis？
  Remote Dictionary Server（远程数据服务） 是一个基于内存的高性能 key-value 数据库。因为是纯内存操作，Redis 的性能非常出色，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value DB。

* Redis 相比 memcached 有哪些优势？
  + 存储方式 Memecache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。 Redis 有部份存在硬盘上，这样能保证数据的持久性。
  + 数据支持类型 Memcache 对数据类型支持相对简单。 Redis 有复杂的数据类型。
  + 使用底层模型不同 它们之间底层实现方式以及与客户端之间通信的应用协议不一样。 Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。

* Redis 有哪些适合的场景？

* Redis 支持哪几种数据类型？
  字符串 String、字典 Hash、列表 List、集合 Set、有序集合 SortedSet。

  如果你是 Redis 中高级用户，还需要加上下面几种数据结构 HyperLogLog、Geo、Pub/Sub。

  高级玩法还有： Redis Module，像 BloomFilter，RedisSearch，Redis-ML。

* 一个字符串类型的值能存储最大容量是多少？
  redis 最大可以达到 512MB。

* Redis 有哪几种数据淘汰策略？
  redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6 种数据淘汰策略：
  + volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰
  + volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰
  + volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰
  + allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰
  + allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰
  + no-enviction（驱逐）：禁止驱逐数据

  redis 确定驱逐某个键值对后，会删除这个数据并，并将这个数据变更消息发布到本地（AOF 持久化）和从机（主从连接）。

  使用策略规则： 　　

  1. 如果数据呈现幂律分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 allkeys-lru 　　
  2. 如果数据呈现平等分布，也就是所有的数据访问频率都相同，则使用 allkeys-random

* MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数据都是热点数据？


* Redis 集群方案应该怎么做？都有哪些方案？[fn:2]

* Redis 集群方案什么情况下会导致整个集群不可用？
  + 如果集群任意 master 挂掉, 且当前 master 没有 slave. 集群进入 fail 状态, 也可以理解成集群的 slot 映射 [0-16383] 不完成时进入 fail 状态. ps : redis-3.0.0.rc1 加入 cluster-require-full-coverage 参数, 默认关闭, 打开集群兼容部分失败.

  + 如果集群超过半数以上 master 挂掉，无论是否有 slave 集群进入 fail 状态.

  ps: 当集群不可用时, 所有对集群的操作做都不可用，收到 ((error) CLUSTERDOWN The cluster is down) 错误

* 说说 Redis 哈希槽的概念？
  Redis 集群没有使用一致性 hash, 而是引入了哈希槽的概念，Redis 集群有 16384 个哈希槽，每个 key 通过 CRC16 校验后对 16384 取模来决定放置哪个槽，集群的每个节点负责一部分 hash 槽。

* Redis 集群的主从复制模型是怎样的？
  为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，所以集群使用了主从复制模型, 每个节点都会有 N-1 个复制品。

* Redis 集群会有写操作丢失吗？为什么？
  Redis 并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。

* Redis 集群之间是如何复制的？
  异步复制

* Redis 集群最大节点个数是多少？
  16384 个

* Redis 集群如何选择数据库？
  Redis 集群目前无法做数据库选择，默认在 0 数据库。

* 怎么理解 Redis 事务？
  1. 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
  2. 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。

* Redis 事务相关的命令有哪几个？
  MULTI、EXEC、DISCARD、WATCH

* Redis 如何做内存优化？[fn:3]
  尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的 web 系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的 key, 而是应该把这个用户的所有信息存储到一张散列表里面.

* Redis 回收进程如何工作的？
  一个客户端运行了新的命令，添加了新的数据。Redi 检查内存使用情况，如果大于 maxmemory 的限制, 则根据设定好的策略进行回收。一个新的命令被执行，等等。所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。

* 都有哪些办法可以降低 Redis 的内存使用情况呢？
  如果你使用的是 32 位的 Redis 实例，可以好好利用 Hash,list,sorted set,set 等集合类型数据，因为通常情况下很多小的 Key-Value 可以用更紧凑的方式存放到一起。

* Redis 的内存用完了会发生什么？

  如果达到设置的上限，Redis 的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以将 Redis 当缓存来使用配置淘汰机制，当 Redis 达到内存上限时会冲刷掉旧的内容。

* 一个 Redis 实例最多能存放多少的 keys？List、Set、Sorted Set 他们最多能存放多少元素？
  理论上 Redis 可以处理多达 2^32 的 keys，并且在实际中进行了测试，每个实例至少存放了 2 亿 5 千万的 keys。我们正在测试一些较大的值。任何 list、set、和 sorted set 都可以放 2^32 个元素。换句话说，Redis 的存储极限是系统中的可用内存值。

* 为什么要做 Redis 分区？

* 你知道有哪些 Redis 分区实现方案？

* Redis 分区有什么缺点？

* Redis 持久化数据和缓存怎么做扩容？

* 分布式 Redis 是前期做还是后期规模上来了再做好？为什么？

* 支持一致性哈希的客户端有哪些？

* Redis 的持久化机制是什么？各自的优缺点？
  Redis 提供两种持久化机制 RDB 和 AOF 机制:

** RDB(Redis DataBase)
   是指用数据集快照的方式 (半持久化模式) 记录 redis 数据库的所有键值对, 在某个时间点将数据写入一个临时文件，持久化结束后，用这个临时文件替换上次持久化的文件，达到数据恢复。

   优点： 　　
   1. 只有一个文件 dump.rdb，方便持久化。 　　

   2. 容灾性好，一个文件可以保存到安全的磁盘。 　　

   3. 性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。(使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能) 4. 相对于数据集大时，比 AOF 的启动效率更高。

   缺点： 　　

   1. 数据安全性低。(RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候)

** AOF(Append-only file)

   指所有的命令行记录以 redis 命令请求协议的格式 (完全持久化存储) 保存为 aof 文件。

   优点： 　　
   1. 数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次命令操作就记录到 aof 文件中一次。 　　

   2. 通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。 　　

   3. AOF 机制的 rewrite 模式。(AOF 文件没被 rewrite 之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)

   缺点：
   1. AOF 文件比 RDB 文件大，且恢复速度慢。 　　
   2. 数据集大的时候，比 rdb 启动效率低。

* Redis 常见性能问题和解决方案？
  + Master 最好不要写内存快照，如果 Master 写内存快照，save 命令调度 rdbSave 函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务。
  + 如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一次
  + 为了主从复制的速度和连接的稳定性，Master 和 Slave 最好在同一个局域网内
  + 尽量避免在压力很大的主库上增加从库
  + 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3... 这样的结构方便解决单点故障问题，实现 Slave 对 Master 的替换。如果 Master 挂了，可以立刻启用 Slave1 做 Master，其他不变。

* 使用过 Redis 分布式锁么，它是什么回事？[fn:1]

  先拿 setnx 来争抢锁，抢到之后，再用 expire 给锁加一个过期时间防止锁忘记了释放。

  这时候对方会告诉你说你回答得不错，然后接着问如果在 setnx 之后执行 expire 之前进程意外 crash 或者要重启维护了，那会怎么样？

  这时候你要给予惊讶的反馈：唉，是喔，这个锁就永远得不到释放了。紧接着你需要抓一抓自己得脑袋，故作思考片刻，好像接下来的结果是你主动思考出来的，然后回答：我记得 set 指令有非常复杂的参数，这个应该是可以同时把 setnx 和 expire 合成一条指令来用的！对方这时会显露笑容，心里开始默念：摁，这小子还不错。

* 假如 Redis 里面有 1 亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如果将它们全部找出来？

  使用 keys 指令可以扫出指定模式的 key 列表。

  对方接着追问：如果这个 redis 正在给线上的业务提供服务，那使用 keys 指令会有什么问题？

  这个时候你要回答 redis 关键的一个特性：redis 的单线程的。keys 指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用 scan 指令，scan 指令可以无阻塞的提取出指定模式的 key 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 keys 指令长。

* 使用过 Redis 做异步队列么，你是怎么用的？

  一般使用 list 结构作为队列，rpush 生产消息，lpop 消费消息。当 lpop 没有消息的时候，要适当 sleep 一会再重试。

  如果对方追问可不可以不用 sleep 呢？list 还有个指令叫 blpop，在没有消息的时候，它会阻塞住直到消息到来。

  如果对方追问能不能生产一次消费多次呢？使用 pub/sub 主题订阅者模式，可以实现 1:N 的消息队列。

  如果对方追问 pub/sub 有什么缺点？在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如 rabbitmq 等。

  如果对方追问 redis 如何实现延时队列？我估计现在你很想把面试官一棒打死如果你手上有一根棒球棍的话，怎么问的这么详细。但是你很克制，然后神态自若的回答道：使用 sortedset，拿时间戳作为 score，消息内容作为 key 调用 zadd 来生产消息，消费者用 zrangebyscore 指令获取 N 秒之前的数据轮询进行处理。

  到这里，面试官暗地里已经对你竖起了大拇指。但是他不知道的是此刻你却竖起了中指，在椅子背后。

* 如果有大量的 key 需要设置同一时间过期，一般需要注意什么？

  如果大量的 key 过期时间设置的过于集中，到过期的那个时间点，redis 可能会出现短暂的卡顿现象。一般需要在时间上加一个随机值，使得过期时间分散一些。

* Redis 如何做持久化的？

  bgsave 做镜像全量持久化，aof 做增量持久化。因为 bgsave 会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要 aof 来配合使用。在 redis 实例重启时，会使用 bgsave 持久化文件重新构建内存，再使用 aof 重放近期的操作指令来实现完整恢复重启之前的状态。

  对方追问那如果突然机器掉电会怎样？取决于 aof 日志 sync 属性的配置，如果不要求性能，在每条写指令时都 sync 一下磁盘，就不会丢失数据。但是在高性能的要求下每次都 sync 是不现实的，一般都使用定时 sync，比如 1s1 次，这个时候最多就会丢失 1s 的数据。

  对方追问 bgsave 的原理是什么？你给出两个词汇就可以了，fork 和 cow。fork 是指 redis 通过创建子进程来进行 bgsave 操作，cow 指的是 copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。

* Pipeline 有什么好处，为什么要用 pipeline？

  可以将多次 IO 往返的时间缩减为一次，前提是 pipeline 执行的指令之间没有因果相关性。使用 redis-benchmark 进行压测的时候可以发现影响 redis 的 QPS 峰值的一个重要因素是 pipeline 批次指令的数目。

* Redis 的同步机制了解么？

  Redis 可以使用主从同步，从从同步。第一次同步时，主节点做一次 bgsave，并同时将后续修改操作记录到内存 buffer，待完成后将 rdb 文件全量同步到复制节点，复制节点接受完成后将 rdb 镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。

* 是否使用过 Redis 集群，集群的原理是什么？

  Redis Sentinal 着眼于高可用，在 master 宕机时会自动将 slave 提升为 master，继续提供服务。

  Redis Cluster 着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行分片存储。


* Footnotes

[fn:1] [[https://mp.weixin.qq.com/s/507jyNbL4xCkxyW6Xk15Xg][Redis面试刁难大全]]

[fn:2] [[https://www.zhihu.com/question/21419897][Redis集群方案怎么做]]

[fn:3] [[https://cachecloud.github.io/2017/02/16/Redis%25E5%2586%2585%25E5%25AD%2598%25E4%25BC%2598%25E5%258C%2596/][Redis内存优化]]
