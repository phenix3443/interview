# -*- coding:utf-8-*-
#+TITLE: MySQL常见问题
#+AUTHOR: liushangliang
#+EMAIL: phenix3443+github@gmail.com

* 数据库范式[fn:1]
** 什么是范式（NF,normal form）
   范式就是一张数据表的表结构锁复合的某种设计标准的级别。数据库范式也分为 1NF，2NF，3NF，BCNF，4NF，5NF。符合高一级范式的设计必定符合低一级范式。其最大的意义就是为了避免数据的冗余和插入、删除、更新的异常。一般数据库满足第三范式就可以了。

** 第一范式(1NF)
   *列不可分* 。

   以每天的销售表来举例：
   #+BEGIN_EXAMPLE
   Order(id, product, buyer, amount, payed)
   #+END_EXAMPLE
   显然，不管是产品（product）还是买家（buyer）都会有更详细的属性，比如product会有商品名称，商品价格，产地等，buyer 也有昵称，年龄，住址等，这些属性都是可以再分割的，所以并不符合 1NF 范式，需要将其完全拆至不可分割为止。

   修改示范：
   #+BEGIN_EXAMPLE
   Order(id, product-id, product-name, buyer-id, buyer-name, amount, payed)
   #+END_EXAMPLE

   意义：减少表中的冗余数据。

** 第二范式（2NF）
   *有主键，保证完全依赖* 。

   意思是：如果依赖于主键，则需要依赖于所有主键，不能存在依赖部分主键的情况。

   对于上面那个例子，主键（primer key）是：（id, product-id, buyer-id）：

   对于 product-name 属性，它仅依赖于 product-id，跟 id，buyer-id 没有任何关系，所以它对于主键的依赖是 “部分依赖”，并不符合 2NF。简单点说，就是不要把不相关的东西放到一个表里面。

   拆解成几个不同的表：
   #+BEGIN_EXAMPLE
   Order(id, product-id, buyer-id, amount, payed)
   ProductInformation(product-id, product-name)
   BuyerInformation(buyer-id, buyer-name)
   #+END_EXAMPLE

   意义：不相关的东西不要放在一起，用多个小表连接来代替大表，减少修改时候的负担。

** 第三范式（3NF）
   *无依赖传递* 。

   意思是：对于除了主键外的列，不存在某个列，它能决定其他列。

   上面的例子中，最终支付金额（payed）依赖购买数量（amount），购买数量又依赖主键，形成类依赖传递。

   应该通过字段，解除依赖传递：
   #+BEGIN_EXAMPLE
   Order(id, product-id, buyer-id, amount, price)
   #+END_EXAMPLE

   意义：避免查询路径过长而导致询问时间过长或者更新异常。上面的例子太简单，说明不了什么问题。

* 索引[fn:2]

** 概念
   索引是对数据库表中一个或多个列的值进行排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用 B_TREE 及其变种。索引加速了数据访问，因为存储引擎不会再去扫描整张表得到需要的数据；相反，它从根节点开始，根节点保存了子节点的指针，存储引擎会根据指针快速寻找数据。
   #+CAPTION: 数据表索引示例
   #+NAME: fig-1
   [[http://static.zybuluo.com/Rico123/z13w648etta3tb90di3btu5b/%E7%B4%A2%E5%BC%95.png]]

   上图显示了一种索引方式。左边是数据库中的数据表，有 col1 和 col2 两个字段，一共有 15 条记录；右边是以 col2 列为索引列的 B-Tree 索引，每个节点包含索引的键值和对应数据表地址的指针，这样就可以都过 B-Tree 在 O(logn) 的时间复杂度内获取相应的数据，这样明显地加快了检索的速度。

** 优点
   + 大大加快数据的检索速度，这也是创建索引的最主要的原因；
   + 加速表和表之间的连接；
   + 在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间；
   + 通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性；

** 缺点
   + 时间方面：创建索引和维护索引要耗费时间，具体地，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度；
   + 空间方面：索引需要占物理空间。

** 分类
   + 普通索引和唯一性索引：索引列的值的唯一性
   + 单个索引和复合索引：索引列所包含的列数
   + 聚簇索引与非聚簇索引：聚簇索引按照数据的物理存储进行划分的。

     对于一堆记录来说，使用聚集索引就是对这堆记录进行堆划分，即主要描述的是物理上的存储。正是因为这种划分方法，导致聚簇索引必须是唯一的。聚集索引可以帮助把很大的范围，迅速减小范围。但是查找该记录，就要从这个小范围中 Scan 了；而非聚集索引是把一个很大的范围，转换成一个小的地图，然后你需要在这个小地图中找你要寻找的信息的位置，最后通过这个位置，再去找你所需要的记录。

     主键是一种特殊的唯一性索引，其可以是聚集索引，也可以是非聚集索引。在 SQLServer 中，主键的创建必须依赖于索引，默认创建的是聚集索引，但也可以显式指定为非聚集索引。InnoDB 作为 MySQL 存储引擎时，默认按照主键进行聚集，如果没有定义主键，InnoDB 会试着使用唯一的非空索引来代替。如果没有这种索引，InnoDB 就会定义隐藏的主键然后在上面进行聚集。所以，对于聚集索引来说，你创建主键的时候，自动就创建了主键的聚集索引。
** 使用
*** 什么样的字段适合创建索引？
    + 经常作查询选择的字段。
    + 经常作表连接的字段。
    + 经常出现在 order by, group by, distinct 后面的字段。
*** 创建索引时需要注意什么？
    + 非空字段：应该指定列为 NOT NULL，除非你想存储 NULL。在 MySQL 中，含有空值的列很难进行查询优化，因为它们使得索引、索引的统计信息以及比较运算更加复杂。你应该用 0、一个特殊的值或者一个空串代替空值；
    + 取值离散大的字段：（变量各个取值之间的差异程度）的列放到联合索引的前面，可以通过 count() 函数查看字段的差异值，返回值越大说明字段的唯一值越多字段的离散程度高；
    + 索引字段越小越好：数据库的数据存储以页为单位一页存储的数据越多一次 IO 操作获取的数据越大效率越高。

** 原理
   在数据结构中，我们最为常见的搜索结构就是二叉搜索树和 AVL 树 (高度平衡的二叉搜索树，为了提高二叉搜索树的效率，减少树的平均搜索长度) 了。然而，无论二叉搜索树还是 AVL 树，当数据量比较大时，都会由于树的深度过大而造成 I/O 读写过于频繁，进而导致查询效率低下，因此对于索引而言，多叉树结构成为不二选择。特别地，B-Tree 的各种操作能使 B 树保持较低的高度，从而保证高效的查找效率。

   B-Tree 是一种平衡多路查找树，是一种动态查找效率很高的树形结构。B+Tree 是应文件系统所需而产生的一种 B-Tree 树的变形树。

   InnoDB 存储引擎的索引用B+Tree实现。

*** 文件索引和数据库索引为什么使用 B+Tree, 而不是B-Tree或红黑树?
    + 数据库系统巧妙利用了局部性原理与磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次 I/O 就可以完全载入，而红黑树这种结构，高度明显要深的多，并且由于逻辑上很近的节点 (父子) 物理上可能很远，无法利用局部性。

    + B+Tree 的磁盘读写代价更低：B+Tree 的内部结点并没有指向关键字具体信息的指针，因此其内部结点相对 B-Tree更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多，相对来说 IO 读写次数也就降低了；

    + B+Tree 的查询效率更加稳定：由于内部结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引，所以，任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当；

    + B+Tree只要遍历叶子节点就可以实现整棵树的遍历，而且在数据库中基于范围的查询是非常频繁的，而 B-Tree只能中序遍历所有节点，效率太低。这是数据库选用 B+Tree的最主要原因。

* 事务
  事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。

** 事务的特征
   + 原子性 (Atomicity)：事务所包含的一系列数据库操作要么全部成功执行，要么全部回滚；
   + 一致性 (Consistency)：事务的执行结果必须使数据库从一个一致性状态到另一个一致性状态；
   + 隔离性 (Isolation)：并发执行的事务之间不能相互影响；
   + 持久性 (Durability)：事务一旦提交，对数据库中数据的改变是永久性的。

** 事务并发带来的问题
   + 脏读：一个事务读取了另一个事务未提交的数据；
   + 不可重复读：不可重复读的重点是修改，同样条件下两次读取结果不同，也就是说，被读取的数据可以被其它事务修改；
   + 幻读：幻读的重点在于新增或者删除，同样条件下两次读出来的记录数不一样。

** 隔离级别
   隔离级别决定了一个 session 中的事务可能对另一个 session 中的事务的影响。ANSI 标准定义了 4 个隔离级别，MySQL 的 InnoDB 都支持，分别是：
   + READ UNCOMMITTED：最低级别的隔离，通常又称为 dirty read，它允许一个事务读取另一个事务还没 commit 的数据，这样可能会提高性能，但是会导致脏读问题；
   + READ COMMITTED：在一个事务中只允许对其它事务已经 commit 的记录可见，该隔离级别不能避免不可重复读问题；
   + REPEATABLE READ：在一个事务开始后，其他事务对数据库的修改在本事务中不可见，直到本事务 commit 或 rollback。但是，其他事务的 insert/delete 操作对该事务是可见的，也就是说，该隔离级别并不能避免幻读问题。在一个事务中重复 select 的结果一样，除非本事务中 update 数据库。
   + SERIALIZABLE：最高级别的隔离，只允许事务串行执行。

   　　MySQL 默认的隔离级别是 REPEATABLE READ。

** MySQL 的事务支持
   MySQL 的事务支持不是绑定在 MySQL 服务器本身，而是与存储引擎相关：
   + MyISAM：不支持事务，用于只读程序提高性能；
   + InnoDB：支持 ACID 事务、行级锁、并发；
   + Berkeley DB：支持事务。

* 优化
  实践中，MySQL 的优化主要涉及 SQL 语句及索引的优化、数据表结构的优化、系统配置的优化和硬件的优化四个方面。

** SQL 语句的优化

   SQL 语句的优化主要包括三个问题，即如何发现有问题的 SQL、如何分析 SQL 的执行计划以及如何优化 SQL，下面将逐一解释。

*** 怎么发现有问题的 SQL?

    通过 MySQL 慢查询日志对有效率问题的 SQL 进行监控。

    MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阀值的语句，具体指运行时间超过 long_query_time 值的 SQL，则会被记录到慢查询日志中。long_query_time 的默认值为 10，意思是运行 10s 以上的语句。慢查询日志的相关参数如下所示：
    #+CAPTION: 慢查询参数
    #+NAME: fig-3
    [[http://static.zybuluo.com/Rico123/8z3mtyozm1bh1gluttrahdri/慢查询日志相关参数.png]]


    通过 MySQL 的慢查询日志，我们可以查询出执行的次数多占用的时间长的 SQL，可以通过 pt_query_disgest(一种 MySQL 慢日志分析工具) 分析 Rows examine(MySQL 执行器需要检查的行数) 项去找出 IO 大的 SQL 以及发现未命中索引的 SQL，对于这些 SQL，都是我们优化的对象。

*** 通过 explain 查询和分析 SQL 的执行计划

    使用 EXPLAIN 关键字可以知道 MySQL 是如何处理你的 SQL 语句的，以便分析查询语句或是表结构的性能瓶颈。通过 explain 命令可以得到表的读取顺序、数据读取操作的操作类型、哪些索引可以使用、哪些索引被实际使用、表之间的引用以及每张表有多少行被优化器查询等问题。当扩展列 extra 出现 Using filesort 和 Using temporay，则往往表示 SQL 需要优化了。

*** SQL 语句的优化

    + 优化 insert 语句：一次插入多值；
    + 应尽量避免在 where 子句中使用!= 或 <> 操作符，否则将引擎放弃使用索引而进行全表扫描；
    + 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描；
    + 优化嵌套查询：子查询可以被更有效率的连接 (Join) 替代；
    + 很多时候用 exists 代替 in 是一个好的选择。

** 索引优化
   建议在经常作查询选择的字段、经常作表连接的字段以及经常出现在 order by、group by、distinct 后面的字段中建立索引。但必须注意以下几种可能会引起索引失效的情形：
   + 以 “%(表示任意 0 个或多个字符)” 开头的 LIKE 语句，模糊匹配；
   + OR 语句前后没有同时使用索引；
   + 数据类型出现隐式转化（如 varchar 不加单引号的话可能会自动转换为 int 型）；
   + 对于多列索引，必须满足最左匹配原则 (eg, 多列索引 col1、col2 和 col3，则索引生效的情形包括 col1 或 col1，col2 或 col1，col2，col3)。

** 数据库表结构的优化

   数据库表结构的优化包括选择合适数据类型、表的范式的优化、表的垂直拆分和表的水平拆分等手段。

*** 选择合适数据类型
    + 使用较小的数据类型解决问题；
    + 使用简单的数据类型 (MySQL 处理 int 要比 varchar 容易)；
    + 尽可能的使用 not null 定义字段；
    + 尽量避免使用 text 类型，非用不可时最好考虑分表；

*** 表的范式的优化

    一般情况下，表的设计应该遵循三大范式。

*** 表的垂直拆分

    把含有多个列的表拆分成多个表，解决表宽度问题，具体包括以下几种拆分手段：
    + 把不常用的字段单独放在同一个表中；
    + 把大字段独立放入一个表中；
    + 把经常使用的字段放在一起；

    这样做的好处是非常明显的，具体包括：拆分后业务清晰，拆分规则明确、系统之间整合或扩展容易、数据维护简单。

*** 表的水平拆分

    表的水平拆分用于解决数据表中数据过大的问题，水平拆分每一个表的结构都是完全一致的。一般地，将数据平分到 N 张表中的常用方法包括以下两种：

    + 对 ID 进行 hash 运算，如果要拆分成 5 个表，mod(id,5) 取出 0~4 个值；
    + 针对不同的 hashID 将数据存入不同的表中；

    表的水平拆分会带来一些问题和挑战，包括跨分区表的数据查询、统计及后台报表的操作等问题，但也带来了一些切实的好处：
    + 表分割后可以降低在查询时需要读的数据和索引的页数，同时也降低了索引的层数，提高查询速度；
    + 表中的数据本来就有独立性，例如表中分别记录各个地区的数据或不同时期的数据，特别是有些数据常用，而另外一些数据不常用。
    + 需要把数据存放到多个数据库中，提高系统的总体可用性 (分库，鸡蛋不能放在同一个篮子里)。

** 系统配置的优化

   + 操作系统配置的优化：增加 TCP 支持的队列数
   + MySQL 配置文件优化：Innodb 缓存池设置 (innodb_buffer_pool_size，推荐总内存的 75%) 和缓存池的个数（innodb_buffer_pool_instances）。

** 硬件的优化
   + CPU：核心数多并且主频高的
   + 内存：增大内存
   + 磁盘配置和选择：磁盘性能

* 简单说一说 drop、delete 与 truncate 的区别

  SQL 中的 drop、delete、truncate 都表示删除，但是三者有一些差别：
  + Delete 用来删除表的全部或者一部分数据行，执行 delete 之后，用户需要提交 (commmit) 或者回滚 (rollback) 来执行删除或者撤销删除， delete 命令会触发这个表上所有的 delete 触发器；
  + Truncate 删除表中的所有数据，这个操作不能回滚，也不会触发这个表上的触发器，TRUNCATE 比 delete 更快，占用的空间更小；
  + Drop 命令从数据库中删除表，所有的数据行，索引和权限也会被删除，所有的 DML 触发器也不会被触发，这个命令也不能回滚。

  因此，在不再需要一张表的时候，用 drop；在想删除部分数据行时候，用 delete；在保留表而删除所有数据的时候用 truncate。

* 什么叫视图？游标是什么？
  视图是一种虚拟的表，通常是有一个表或者多个表的行或列的子集，具有和物理表相同的功能，可以对视图进行增，删，改，查等操作。特别地，对视图的修改不影响基本表。相比多表查询，它使得我们获取数据更容易。

  游标是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。

  在操作 MySQL 的时候，我们知道 MySQL 检索操作返回一组称为结果集的行。这组返回的行都是与 SQL 语句相匹配的行（零行或多行）。使用简单的 SELECT 语句，例如，没有办法得到第一行、下一行或前 10 行，也不存在每次一行地处理所有行的简单方法（相对于成批地处理它们）。有时，需要在检索出来的行中前进或后退一行或多行。这就是使用游标的原因。游标（cursor）是一个存储在 MySQL 服务器上的数据库查询，它不是一条 SELECT 语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据。游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或做出更改。

* 什么是触发器？

  触发器是与表相关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合。触发器的这种特性可以协助应用在数据库端确保数据库的完整性。

* MySQL 存储引擎中的 MyISAM 和 InnoDB 区别详解

  在 MySQL 5.5 之前，MyISAM 是 MySQL 的默认数据库引擎，其由早期的 ISAM（Indexed Sequential Access Method：有索引的顺序访问方法）所改良。虽然 MyISAM 性能极佳，但却有一个显著的缺点： 不支持事务处理。不过，MySQL 也导入了另一种数据库引擎 InnoDB，以强化参考完整性与并发违规处理机制，后来就逐渐取代 MyISAM。

  InnoDB 是 MySQL 的数据库引擎之一，其由 Innobase oy 公司所开发，2006 年五月由甲骨文公司并购。与传统的 ISAM、MyISAM 相比，InnoDB 的最大特色就是支持 ACID 兼容的事务功能，类似于 PostgreSQL。目前 InnoDB 采用双轨制授权，一是 GPL 授权，另一是专有软件授权。具体地，MyISAM 与 InnoDB 作为 MySQL 的两大存储引擎的差异主要包括：

  + 存储结构：每个 MyISAM 在磁盘上存储成三个文件：第一个文件的名字以表的名字开始，扩展名指出文件类型。.frm 文件存储表定义，数据文件的扩展名为. MYD (MYData)，索引文件的扩展名是. MYI (MYIndex)。InnoDB 所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB。

  + 存储空间：MyISAM 可被压缩，占据的存储空间较小，支持静态表、动态表、压缩表三种不同的存储格式。InnoDB 需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引。

  + 可移植性、备份及恢复：MyISAM 的数据是以文件的形式存储，所以在跨平台的数据转移中会很方便，同时在备份和恢复时也可单独针对某个表进行操作。InnoDB 免费的方案可以是拷贝数据文件、备份 binlog，或者用 MySQLdump，在数据量达到几十 G 的时候就相对痛苦了。

  + 事务支持：MyISAM 强调的是性能，每次查询具有原子性，其执行数度比 InnoDB 类型更快，但是不提供事务支持。InnoDB 提供事务、外键等高级数据库功能，具有事务提交、回滚和崩溃修复能力。

  + AUTO_INCREMENT：在 MyISAM 中，可以和其他字段一起建立联合索引。引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，它可以根据前面几列进行排序后递增。InnoDB 中必须包含只有该字段的索引，并且引擎的自动增长列必须是索引，如果是组合索引也必须是组合索引的第一列。

  + 表锁差异：MyISAM 只支持表级锁，用户在操作 MyISAM 表时，select、update、delete 和 insert 语句都会给表自动加锁，如果加锁以后的表满足 insert 并发的情况下，可以在表的尾部插入新的数据。InnoDB 支持事务和行级锁。行锁大幅度提高了多用户并发操作的新能，但是 InnoDB 的行锁，只是在 WHERE 的主键是有效的，非主键的 WHERE 都会锁全表的。

  + 全文索引：MyISAM 支持 FULLTEXT 类型的全文索引；InnoDB 不支持 FULLTEXT 类型的全文索引，但是 innodb 可以使用 sphinx 插件支持全文索引，并且效果更好。

  + 表主键：MyISAM 允许没有任何索引和主键的表存在，索引都是保存行的地址。对于 InnoDB，如果没有设定主键或者非空唯一索引，就会自动生成一个 6 字节的主键 (用户不可见)，数据是主索引的一部分，附加索引保存的是主索引的值。

  + 表的具体行数：MyISAM 保存表的总行数，select count() from table; 会直接取出出该值；而 InnoDB 没有保存表的总行数，如果使用 select count() from table；就会遍历整个表，消耗相当大，但是在加了 wehre 条件后，myisam 和 innodb 处理的方式都一样。

  + CURD 操作：在 MyISAM 中，如果执行大量的 SELECT，MyISAM 是更好的选择。对于 InnoDB，如果你的数据执行大量的 INSERT 或 UPDATE，出于性能方面的考虑，应该使用 InnoDB 表。DELETE 从性能上 InnoDB 更优，但 DELETE FROM table 时，InnoDB 不会重新建立表，而是一行一行的删除，在 innodb 上如果要清空保存有大量数据的表，最好使用 truncate table 这个命令。

  + 外键：MyISAM 不支持外键，而 InnoDB 支持外键。

  通过上述的分析，基本上可以考虑使用 InnoDB 来替代 MyISAM 引擎了，原因是 InnoDB 自身很多良好的特点，比如事务支持、存储过程、视图、行级锁、外键等等。尤其在并发很多的情况下，相信 InnoDB 的表现肯定要比 MyISAM 强很多。另外，必须需要注意的是，任何一种表都不是万能的，合适的才是最好的，才能最大的发挥 MySQL 的性能优势。如果是不复杂的、非关键的 Web 应用，还是可以继续考虑 MyISAM 的，这个具体情况具体考虑。

* Footnotes

[fn:1] https://www.zhihu.com/question/24696366/answer/46864498

[fn:2] https://blog.csdn.net/justloveyou_/article/details/78308460
